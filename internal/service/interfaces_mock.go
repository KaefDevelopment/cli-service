// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package service is a generated GoMock package.
package service

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	model "github.com/jaroslav1991/cli-service/internal/model"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockRepository) Create(events model.Events) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", events)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockRepositoryMockRecorder) Create(events interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockRepository)(nil).Create), events)
}

// Delete mocks base method.
func (m *MockRepository) Delete(events model.Events) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", events)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockRepositoryMockRecorder) Delete(events interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockRepository)(nil).Delete), events)
}

// GetMarked mocks base method.
func (m *MockRepository) GetMarked() (model.Events, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMarked")
	ret0, _ := ret[0].(model.Events)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMarked indicates an expected call of GetMarked.
func (mr *MockRepositoryMockRecorder) GetMarked() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMarked", reflect.TypeOf((*MockRepository)(nil).GetMarked))
}

// MarkSent mocks base method.
func (m *MockRepository) MarkSent() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarkSent")
	ret0, _ := ret[0].(error)
	return ret0
}

// MarkSent indicates an expected call of MarkSent.
func (mr *MockRepositoryMockRecorder) MarkSent() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkSent", reflect.TypeOf((*MockRepository)(nil).MarkSent))
}

// WithTx mocks base method.
func (m *MockRepository) WithTx(txProvider TxProvider) Repository {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithTx", txProvider)
	ret0, _ := ret[0].(Repository)
	return ret0
}

// WithTx indicates an expected call of WithTx.
func (mr *MockRepositoryMockRecorder) WithTx(txProvider interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithTx", reflect.TypeOf((*MockRepository)(nil).WithTx), txProvider)
}

// MockTxProvider is a mock of TxProvider interface.
type MockTxProvider struct {
	ctrl     *gomock.Controller
	recorder *MockTxProviderMockRecorder
}

// MockTxProviderMockRecorder is the mock recorder for MockTxProvider.
type MockTxProviderMockRecorder struct {
	mock *MockTxProvider
}

// NewMockTxProvider creates a new mock instance.
func NewMockTxProvider(ctrl *gomock.Controller) *MockTxProvider {
	mock := &MockTxProvider{ctrl: ctrl}
	mock.recorder = &MockTxProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTxProvider) EXPECT() *MockTxProviderMockRecorder {
	return m.recorder
}

// Transaction mocks base method.
func (m *MockTxProvider) Transaction(f func(TxProvider) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Transaction", f)
	ret0, _ := ret[0].(error)
	return ret0
}

// Transaction indicates an expected call of Transaction.
func (mr *MockTxProviderMockRecorder) Transaction(f interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Transaction", reflect.TypeOf((*MockTxProvider)(nil).Transaction), f)
}
